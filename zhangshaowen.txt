一  高质量高发(学完就立马动手)

1 奔溃:  .
java 与 native奔溃的获取, 目的是获取堆栈信息

bugly 捕获 java与native （breakpad）c/c++奔溃, 已测试ok

bugly 相信你能抓到java nativie的anr的log

OOM问题怎么搞，uncatchException能catch住吗?Thread.setDefaultExceptionHandler()能catch住，这个时候app还能干其他事情吗?如果做其他事情会不会二次奔溃  

OOM终极解决办法: OOM前，可用的内存的80%了(轮询:前台5分钟一次，在主线程空闲的Idelhandler, 开启线程启动dump，保存到文件后，开启新的进程分析，哈哈库解析成一个快照)
  dump 内存，堆转存，查看最大的对象，内存泄漏的问题


java 异常Thread.setDefaultExceptionHandler(）获取，注意你是覆盖了系统的默认实现，这时候你得注意覆盖是否有问题，是否需要保存系统得默认实现

c/c++ 异常： 发出异常signal信号, linux 发出异常信号，signal (int ,sigAction), 但是同样注意系统得默认实现,但是只是只是获取到了这么一个异常信号，堆栈信息这么来，
            google breakpad 能获取到地址， 然后ndk底下有一个哦工具 address2Line(),能打印除行号
	    unwind 能获取到c/c++调用栈，另外还需要与java堆栈结合起来(未实践)
	    c++ 有try catch, 通过Jnienv. 把异常跑到java层来
	    
java 与 c/c++ 通信的文件命名规范，一般都是java的全类名下划线，然后.cpp
比如android.view.DisplayEventReceiver.java  对应着cpp文件   android_view_DisplayEventReceiver.cpp


ANR异常怎么搞:  

如何产生：原理: anr 是ams进程弹出的框，监控了组件的声明周期函数，调用之前发送 了一个延时消息，执行完成remove掉，所以就是声明周期方法的执行时间，如何监控
(编译插桩出来了,Aspecj（对asm封装）简单,asm麻烦出来，都是对class字节码的处理)ProcessCpuTracker.java，没有监控声明周期回调函数就不会anr
asm: gradle 插件，transform 处理自己写的代码，引用aar，jar，除了系统class，androix也可以认为是第三方jar

断点调试gradle 插件： 
https://fucknmb.com/2017/07/05/%E5%8F%88%E6%8E%8C%E6%8F%A1%E4%BA%86%E4%B8%80%E9%A1%B9%E6%96%B0%E6%8A%80%E8%83%BD-%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95Gradle%E6%8F%92%E4%BB%B6/

直接用插件项目来测，将其发布到本地maven来进行debug


如何捕捉: 像系统一样的获取? 获取进程的错误列表，过滤anr 异常,参考源码，里面有堆栈信息
如何解决: 堆栈信息（咋搞）每个函数都生成了一个methodId (int)

如何获取anr信息: 思路: 参考 trace.txt 系统是如何生存的, 系统是通过这个类ProcessCpuTracker.java获取，其实就是读取linux 中 /proc/xxxx 虚拟文件(size=0)
anr 的框是ams 弹出，
各个组件以及input 输入ANR 逻辑 (未debug)
android 里面组件内的函数弹出anr，这是ams弹出的，弹出前会吧anr写入.trace.txt文件
另外一个是input anr是在c++弹出(未测试)


监听anr文件, 再无权限，需要了解得是系统如何生成trace.txt文件

监控消息队列运行时间, 不准

消息屏障 MessageQueue. next() (未测试)

anr原理
（这里会迁出一个面出来, 组件的回调函数被系统规定了，组件的回调是谁来调用，跨进程，调用进程是谁：System_server, 其实也就是activity启动流程）
http://gityuan.com/2015/10/31/binder-prepare/

anr检测开源方案: BlockCanary, ANR-WatchDog, SafeLooper 

本进程
startActivity()   ----->  BinderProxy.transact(xxxx)  ----> transactNative  java 层到这里打住了
System_server 进程 回调(c++的回调) Binder.java onTranscat ---> AMS复写了这个方法做了处理,非 ui线程，线程号与进程号不一样
----> AMS.startActivity(), 学会frameWork层代码的调试,as 是可以调试多个进程，两个进程是没有问题，三个进程呢，
bindservice，是不是牵涉到3个进程，可以啊哈

Activity 如何与 Service 通信
如果都是在本进程， 1种： 不用写aidl， binderService时， 在服务端扩展Binder类，直接返回,  
                  2 种： 使用EventBus这类的
binder驱动: 第一，涉及到三个进程: Client, Service进程 debug 的时候 ServiceManager 进程在虚拟机没有找到

1  Service进程通过binder驱动向ServerManager进程, 注册binder 服务对象 (com.lifeblood.ITestService)名字, binder

2 client 进程bindservice(intent, connect)--> 通过名字(com.lifeblood.ITestService)服务查找 请求binder驱动 ---> ServerManager进程返回


Binder.java  BinderProxy.java 同一个文件android6.0


BinderProxy {
  transcate(Parcel p)  ---> nativeTranscate(Parcel p) ---> 通过jni调用android_util_Binder.cpp 开始数据copy,系统调用emcpy( size()). size, 开辟在内核缓冲区
  比如写两个值 int a=1, String b = "abc",  int 占4个字节, 字符串长度，这里开辟2个字节表示字符串长度，后面就是字符串的数据, 
  binder驱动通知服务端进程binder线程池的某一个线程，服务器用户空间与内核缓冲区做了映射, 所以它不需要把内核缓冲区数据copy 服务端用户空间 
}

从代码层面
Binder {
  onTranscate(Parcel p),解包 byte[], 前四个字节表示int, 先读取2个字节,字符串长度，然后读取内容，与做蓝牙开源项目给设备发送命令一致，先告诉对方数据有多少，然后
  在读真正的数据
}

		  
ipc通信, 连接 Service进程, client进程, ServiceManager进程

一个进程分为: 用户空间（3g虚拟空间） 与 内核空间(1g内存), 把用户与内核 隔离开来

进程间: 用户空间不共享，共享内核空间

所有进程共享一个内核空间		  
		  
		  
service 生命周期

 startService (service 无限期运行, 除非自己 stopSelf 与调用方 stopService),说的不一定对，如果有其他组件绑定了服务，
 其中一个stopservice是不会停止的哈，所以生命周期长，你需要考虑
 什么时候stop它，自己可以自杀，如果如果是startservice，service去处理任务的时间是不知道的，所以只有service本身
 知道，那只有service自己去控制
 
 bindService （除非所有的bindService 客户端全部解除bind,service 才会死掉)
 
 Messenger 信使

oneway 异步 回调

aidl 支持的数据类型（参数与返回值）:  基本类型, ArrayList, HashMap具体实现, 泛型必须是 parcel或者aidl接口, 还有import类型(除了基本数据类型外，就算是同一个包底下)

自定义的数据类型必须实现Parceable, 比如 DownloadInfo implement Parceable, 另外定义 DownloadInfo.aidl 声明，像C 语言中的头文件 





猜想 android.os.Binder   ---> android_os_Binder.cpp 哦，这个不是哦就是Binder.cpp，  在这个目录下 libs/binder/Binder.cpp

如何调试使用gdb调试 系统的 c/c++  (未测试)

Binder.java   BinderProxy.java 只是写在了同一个文件,都是实现iBinder接口

这两个类在两个进程都会跑，所以debug调试xxx 与 system_process(System_server)
发现新大陆，as可以同时调试两个进程，





2 内存 （设备分级(设备的内存(高低设备),cpu核心数，帧率)， Bitmap, 内存泄漏, 安装包大小  ）

帧率： 如何获取帧率，简单一点，一秒钟有多少帧 （系统接口 Choreographer.postFrameCallback(long startdTimePerFrame)）返回每一帧绘制的开始时间
      异常帧率模拟

帧率异常表现: 不稳定性与掉帧的百分比


matrix 有HPROF文件裁剪与重复图片监控的实现  

HPROF文件裁剪 : (matrix 源码 在 HprofBufferShrinker.shrink(File hprofIn, File hprofOut) 一个输入file文件，一个裁剪的文件,能裁剪到30%,必须知道hprof文件协议，这里很复杂)
重复图片监控: 1 拿到类实例ClassObj bitmapclassObj = findclass(Bitmap), list<ClassInstance> bitmapInstance = bitmapclassObj.getlist(
             2 在通过bitmapInstance 获取mBuffer 字节数组, 比对计算hash值
	     3 源码在这里 DuplicatedBitmapAnalyzer.findDuplicatedBitmap()

应用在前台与后台的判断(registryCallback( onActivityStart() 与 onActivityStop() 计算器来判断)

APK Checker: 针对 APK 安装包的分析检测工具，根据一系列设定好的规则，检测 APK 是否存在特定的问题，并输出较为详细的检测结果报告，用于分析排查问题以及版本追踪
Resource Canary: 基于 WeakReference 的特性和 Square Haha 库开发的 Activity 泄漏和 Bitmap 重复创建检测工具
Trace Canary: 监控ANR、界面流畅性、启动耗时、页面切换耗时、慢函数及卡顿等问题
SQLite Lint: 按官方最佳实践自动化检测 SQLite 语句的使用质量
IO Canary: 检测文件 IO 问题，包括：文件 IO 监控和 Closeable Leak 监控
Battery Canary: 监控 App 活跃线程（待机状态 & 前台 Loop 监控）、ASM 调用 (WakeLock/Alarm/Gps/Wifi/Bluetooth 等传感器)、 
后台流量 (Wifi/移动网络)等 Battery Historian 统计 App 耗电的数据


IO 与 NIO
标准io流 以字节为单位来处理数据

nio (最重要的两个组件，buffer与channel双向通道) 以块为单位处理数据集

buffer (bytebuffer, intbuffer, charbuffer ....里面就是有一个对应的数据类型的数组) 的原理:  position, limit, capcity, mark

内存优化: 从三个方面入手： 设备分级, Bitmap优化, 内存泄漏

 设备分级: 低端设备(手机的内存，CPU核心数，cpu频率),动画不要了，减少功能，565格式的图片，更小的内存的缓存
	onTrimMemory 回调, 清除内存的缓存, 尽量别搞多个进程， 轻量版的app
 Bitmap优化: 565格式也行
           大图监控，大图指的是图片大小大于view大小或大于屏幕宽高了哈，至于具体大多少，自己定义倍数，如何监控大图(线上上报log，线下弹出提示, 引用链) (未实践)
	   重复图片监控: 不同bitmap对象有相同的像素数据Bitmap中的mBuffer
	   图片的总的内存: 在触顶的时候或者奔溃的时候计算
   内存泄漏： java 内存泄漏: leakcanary 线上线下，线上 如何dump，hprof文件大小裁剪问题，压缩
             native 内存泄漏： 
	     
   内存监控: 采集方式: app在前台每5分钟采集一次， PSS,JAVA堆，图片总的内存, 计算出触顶率
   GC 监控： 阻塞性的GC的时间，因为这里会引发卡顿，app进入冰点
      

内存优化的常见思路 (数据结构ArrayMap),体积更加小的序列话方法（protobuf）, view 复用，对象池 (Message)

系统占用最大的对象揪出来 (未实践)

堆内存不足(GC ---> OOM)  物理内存不足(low memory kill(依照进程的优先级)  ---->  重启)   虚拟地址不足 (oom, 内存分配失败, kill )

内存监控：
采集方式: 因为没有回调，那只能轮训，app在前台, 5分之一次,统计内存使用率，pss，java端大小，触顶率  (未测试)
GC 监控

运行内存与安装包体积优化

内存泄漏(leakcanary 修改成为显示)与内存抖动(获取gc信息)
触顶的时候大对象(有哪些对象占用大量内存)的获取，一般是bitmap对象，但是在native中了哈，

内存泄漏：永久泄漏还是短时间泄漏（体现在网络访问的时候）

bitmapt的 像素数据:  android系统版本像素数据存放的区域不一样  version<3.0 像素数据存在native中，充分利用好物理内存，提高内存的使用率，注意什么时候回收，依赖finalize函数调用回收,
3.0>version<7.0  像素数据在堆上 (Bitmap属性 mBuffer：byte[])(像素数据随着对象的回收而回收，当然带来的问题是gc)，因为图片的像素占住空间很大，很容易oom，这时候物理内存可能还有很大空间，但是没有用上，系统内存没有完全利用起来， 所以8.0之后(Bitmap属性 mBuffer不见了)又放到了nativie中，为了提升内存的使用率，NativieAllocationRegistry这个class, 

重复的bitmap 与 不匹配view的图片，超宽率  (未测试)
内存监控模块: 大对象的分配 (c)

Zygote 进程启动加载framework.jar与主题, 每个进程都是从zygote进程 fork出来的(内存copy)

系统启动 --> init 进程  --读取配置文件启动-> zygote 进程，从main函数开始执行，干了什么事情，加载了很多java class，比如android.view.xxx, android.os.xxxx，他是app 的父进程，查看ppid就知道了，同时继承了zygote进程的资源,对于无界面的

fork进程的含义:
1 创建了新的子进程，谁创建它的就是父进程(两个都有独立的空间)
2 复制了父进程的内存空间，在fork这一个时间点，父子进程的内容是一样的

clone():  类似fork,  但父进程更加精细控制， 是否虚拟地址共享，是否fd共享
两个问题:  android 项目里面另开进程，父亲大人是谁: 是zygote64进程  ps -A 查看pid 与ppid 解决了
第二个是: 两个进程证明一下，到底是谁 , 都是 zygote64进程

可以作为JC ROOT 对象: leakcanary 种有 11种
thread 对象, 系统的class(比如InputMethodManager),  synchronized同步的对象  natvie也就是c/c++中的 全局变量,本地变量,静态变量
1 类静态属性： 静态的引用（方法区）java 与 native对象
2 常量引用的对象 常量的引用(方法区)
3 JNI 引用的对象 (java 给c 传递的对象)
4 虚拟机栈 (栈帧中的本地变量表，其实就是局部变量，引用类型) 中引用的对象 callback，

java虚拟机作用: 帮助java对象申请内存，回收内存(那咋回收，一定是某种算法) (未实践)

java 虚拟机内存运行时的各个区域(为什么要分区域: 变量创建与销毁的时间不一样， 还有一些是随着用户线程启动和结束而建立与销毁)

1  程序计数器(每个线程都有一个哦哦，独立存储,线程私有，这是正常的呀): 存啥？？？
   当前线程的行号---> 取指令执行
   
2 java虚拟机栈  （1 线程私有 2 每个线程都有一个，声明周期与线程一致）存啥？？？？  存栈帧, 一个方法一个栈帧
  
  存放java方法对应的栈帧，一个方法对应一个栈帧，方法完栈帧完，好，栈帧存啥: 方法里面有啥， 局部变量，多个局部变量就是一个表了，存放对象的引用，注意
  不是对象，对象实在堆中哦， (这块会出现stackoverflow，深度是多少，虚拟机可以 指定  )
  
  3 本地方法栈 (指的是c函数)
  
  4  堆 
  java对象实例与数组 就这这里，也只存放对象与数组，特点，内存大，所有线程共享，所以就会有同步问题
  同时这里有对象池优化，有内存抖动的问题，函数被调用多次的时候，如果在这里 new obj 或者数组，考虑缓存
  GC 就是管理这个区域， 为何 full gc 会 stop the world， 因为堆内存共享，不暂停会有问题，我回收了一个对象
  另外的线程还在用，出问题了，好，接下来就是回收算法，有很多，采用分代回收
  
  堆空间两块区域: 新生代 和 老年代
  
  这块区域跑出OOM异常
  
  5 方法区 （存啥）
  所有线程共享， 存放Class字节码（有啥? 字段，方法，接口描述）， 常量池，静态变量，代码(编译后的哦)
  
  接口回调如何防止内存泄漏 ？？？？(未实践)
  
可以作为 gc root 的节点
app 中  静态引用，常量引用，栈帧的本地变量(以接口回调实例)，活着的线程
锁对象
系统类，系统的一些东西，比如 输入法....

gc要回收对象是不是能回收，它要去分析某个时间点堆上的快照，如果堆上的对象还在变化
那没有意义，所以gc时候，会暂停其他所有线程(stop the world)，卡顿从这里开始，

堆内存分配与回收(java中都是自动的,c++/c不是哦)

堆(还有一个线程私有区域Thread local)  划分{新生代，老年代 } 根据对象存活时间(age)
minor gc 速度快, 针对的是 新生代区域
full gc  速度慢，是minor gc 十倍的时间,  针对的是老年代区域

经过15次minorgc 后 对象如果没有死，从新生代copy 到老年代
HandlerThread (本质是Thread, 多了一个looper属性,就是有一个死循环的线程)
IntentService （本质是service，多了一个looper属性,就是有一个死循环的线程）

gc 会导致 stop the world，暂停应用所有线程，必须是在某一个时间点上分析内存，引用链关系，也相当于应用程序冻结在了某一个时间点
等待GC工作完成，不可以出现在分析过程中，引用关系还在不断的变化，那分析结果的准确性无法保证，GC 回收无用对象，他需要进行可达性分析工作


3  卡顿：(卡顿过程中函数耗时时间---->插桩 或 profilo 方案)
一定形成一个闭环: 1 监听帧率  2 监听uithread现成的调用栈与函数耗时(java调用栈与c的调用栈) 
3 gc现在的情况抓取，因为gc 会stop the world，暂停应用现成，app进入到了一个冰点，

matrix 的实现原理: ASM插桩 ：统计methodId (long) ---> method_mapping.txt映射
   函数的耗时，调用深度，methodId（需要根据生成的mapping文件查找）
   
插桩 (Aspecj, asm) aspectj 封装了ASM， 除了系统的class不能修改字节码之外，其他都能修改字节码, 插进去的字节码如何调试??????能debug?????，行号能堆上？？？？？

张小龙看人:  1 动手能力  2 想象力  3 完全未知领域愿意折腾

本地工具: systrace, traceview，这个只是本地做的
可以看到所有线程函数调用栈以及各个函数的调用时间，时间占比

facebook 的 profilo 性能统计工具

打点插桩，修改字节码，aspect 性能统计工具，给自己关心的每个函数编译时插桩,也就是给函数的入口(起始时间)与出口(结束时间)
关键线程的函数调用

android 单元测试如何搞: 

minSdkVersion：  兼容的最低 SDK 版 --> 本因为你使用某些api，而且这些api只有在哪个版本之后才能使用
compileSdkVersion： 始终使用最新的
targetSdkVersion: 是系统为了兼容api的行为:  比如系统在某个版本(api 19)上需要修改某一个方法(行为被改变), 为了让apk再 系统版本 < api19 上与 >19的版本体验一致
 系统读取targetSdkVersion 这个值来决定


查看进程cpu的使用率
cat /proc/{pid}/stat

查看系统的cpu使用率
cat /proc/stat

top 

synchronized (this) { //BLOCKED 等待获取对象锁，在这里有可能会被卡住，因为这个时候对象锁可能会被其他线程占用，会被 BLOCKED
     this.wait();     // 进入waiting 状态，释放CPU资源，也释放锁，要想醒过来，需要需要其来唤醒
}

volatile 修饰的变量，所有线程都是从主内存读写，所以所有线程都是可见的

synized修饰method时，调用线程必须先获取对象的锁，才能执行，否则当前线程进入blocked状态

synchronized (内部锁，虚拟机实现)
ReetwenLock  重入锁
ReadWriteLock 读写分离锁，做到了读与读真正并行，当然了，读与写 和 写与写还是窜行的哈，上面两种锁都是一棒子打死了，所以读写锁，在读的场景多，性能会更高 (测试)


1 anr 原理，从源码的角度分析，在上面情况下弹出的， (#####未实践##### )
2 anr 采集，如何分析
主流方案：
BlockCanary  (#####未实践##### )
Anr-WatchDog    (#####未实践##### )
SafeLooper:

matrix 必杀技  (#####未实践##### )


3 预防

线程被CPU执行
Thread.sleep() 或者线程正在进行文件io操作读取操作，让出cpu，读取完毕进入调度序列

消息： 依赖c函数： natviePollOnce , nativeWake 
  epoll_create 
  epoll_ctl(mEpollFd  
  epoll_wait(readfd, timeout) ）未测试
消息


启动优化：
业务并行，任务依赖 (#####未实践##### )

任务并行：注意锁的问题

4,(上) 启动优化，预览闪屏
   业务初始化并行，阿里的alpha
    ASM 插装,统计函数耗时
（下）启动过程不建议网络IO（负载过高，io性能下降）	
liunx 读文件的时候，以block为单位读取，大小为4kb

启动过程中只加载启动时候需要的class吗？能做到吗，或者能指定
	

5, IO 优化
虚拟文件系统 (接口)--->具体的文件系统（实现）文件原因有哪些 
虚拟地址内存空间大小(32位的地址线) 也就是2的32次方 === 4 G  1~3g是用户空间，给app用的， 3~4g是内核空间，是内核程序使用的


1 为什么磁盘会损坏(可能硬件与软件的问题)
  多线程或者多进程同时写入，测试哈 ----> 多线程写文件不加锁看效果?
  
  断电： app 调用write 操作，并不是立马落盘，而是缓存到了pagecache中，然后找到合适的机制落盘（比如page cache 内存快满了，或者这一页数据停留了长时间）

2 为什么io有时候变慢(内存不足，系统回收，把cache清掉了，page cache 丢失)

app 文件系统(page cache:内存缓存(文件的数据))  磁盘(file)
android有两个class
MemoryFile  MappedByteBuffer 内存映射

cpu 是计算功能, 计算就需要数据,数据从内存来, 这个就是I/O操作，当然有寄存器，速度更快
对象是在堆上,所有线程共享, 如果是局部变量的引用，引用存在栈上，栈是线程私有的

原子操作：这一个操作时不可再分比如, rename 重命名

可见性: 一个线程修改主内存的一个变量, 其他线程立马可以知道 （valitile）
多线程并发唯一需要解决的问题就是数据的一致性问题

volatile: 两种语义
1 保证可见性：保证了不同线程对该变量操作的内存的可见性，不等于volatile变量并发操作的安全性
一个线程加十万次, 另一个线程减十万次, 结果不一定为0
i++ i--不是原子(不可分割)操作, 步骤1 : 从主内存读取到工作内存，也就是一个副本， 执行引擎修改它, 然后会写主内存, 这是三个动作
2 禁止指令重排序: 

乱序执行:  程序代码顺序并不是指令执行顺序, 虚拟机会做优化，执行效率高，寻址问题,所以就会导致并发问题  volatile(必须加) boolean flag = false;
什么叫乱序执行: 后面的代码不依赖前面的代码执行的结果，就可以交互顺序执行, 目的是提供效率 ( 为啥?? 好像寻址 )

volatile场景: 一次写，到处读的场景

synchronized 已经有了volatile的功能

学习知识的过程不是理解知识与记忆知识，这些没有用，而是要用这些知识去解决实际的问题,
将输入(学习)与输出(解决实际问题)建立连接

java 内存模型(主内存(lock,unlock)与工作内存的关系)
在这里也解释了synchorinzied是jvm的实现

垃圾回收算法: 回收对象所占用的内存:

在dalvik虚拟机下，应用运行的时候，(字节码经过编译编程机器码才能执行，所以拖慢应用运行效率)   

在art环境下，在安装的时候，字节码会预编译成机器码，存储空间变大了，所以安装慢了，但是程序运行效率高了
在一次验证时间与空间关系



知识的本质是解决问题！！！！知识的本质是解决问题！！！！知识的本质是解决问题！！！！知识的本质是解决问题！！！！知识的本质是解决问题！！！！知识的本质是解决问题！！！！知识的本质是解决问题！！！！知识的本质是解决问题！！！！知识的本质是解决问题！！！！知识的本质是解决问题！！！！知识的本质是解决问题！！！！

一个block块  与 一个  page 页 是什么关系?

文件读取读取以block为单位, 一般为4k， 然后放入缓存page cache，
所以会出现的情况，第一次读取1k的数据花的时间长，第二次再度1kb数据时间短很多了
log 打印需要注意，非常影响性能，在release包必须关掉


android binder mmap 一次数据copy，调用端比如client调用servie的一个借口,需要传参数，这些参数需要copy内核某一个内存，
service 映射到这一段内存，所以不需要copy，所以这一趟只需要一次copy，也就是发送方要把数据copy到内核

文中提到“我们使用 mmap 仅仅只需要一次数据拷贝”，这个说法是不准确的，内存映射的场景直接操作的就是映射到的内存，不需要额外的一次拷贝。
epoll  (#####未实践##### )

Binder的方案确实需要一次数据拷贝,基于mmap，那是Binder的机制决定的，而不是因为内存映射mmap需要一次数据拷贝
在Binder机制中，内存映射在一次通信过程中是单侧的：数据发送方通过transact将数据写入到内核态，这个过程需要一次数据拷贝
(写入过程非内存映射，否则不需要“写”)；而接收方直接映射到了这一块内存，接收的过程不需要内存拷贝，所以Binder机制需要一次数据拷贝。

高效能io操作内存映射mmap， java 与 c++ 实现 (未测试) mappedBytebuffer 

日志库： 腾讯的xlog 与美团的logan (未测试) 




文件读写分离未测试(#####未实践##### )
30个40M大小的文件,分别1，5， 10， 30个线程来读取耗时情况测试，
结论CPU ，多线程在I/0操作上并没有那么大, 不是说线程越多，耗时越少，找到平衡点
磁盘io的瓶颈在磁盘带宽
nio例子--->  okhttp okio

大量的小文件合并成大文件，访问的时候通过文件的偏移量与大小来访问，开源项目淘宝的TFS(#####未实践##### )
/libcore/luni/src/main/java/libcore/io/
H A D	InputStream.read --> IoBridge.java 调用流程 以及使用动态代理 hook住io操作(#####未实践##### )
FileOutputStream()  ---> IoBridge.open(path) --> Libcore.os.open()  --->  BlockGuardOs.open() ---> Posix.open(native函数) ---> libcore_io_Posix.cpp中
Libcore 中 os 是静态变量


java hook BlockGuardos 相关的io操作, 动态代理，恰好是接口 (#####未实践#####)
native hook  profile 监控(性能损耗是ok的) io 操作监控(内容有: 线程，buffer，时间，读写次数)(#####未实践#####)
微信matrix io-canary 继承，也就是微信里面都可以抽出来的 
不良情况: 主线程io，
buffer 对io性能很大影响, 注意体现在内存copy与系统调用的次数

java中的  MappedByteBuffer 就是对 mmap的封装 (#####未实践#####)

无锁的线程安全，无锁的并行计算 java 性能优化4.6(#####未实践#####)

无锁的实现： CAS :比较交换 

(要更新的变量, 期望值，新的值)  ：如果要更新的变量的值与期望值相等，也就是其他线程没有修改，更新最新值, 这里是while死循环判断,至于
期望值是怎么计算的，这是native函数，Unsafe.java对应的c实现没有找到

1 几百kb的文件不要在主线程做read ----> 低端机很容易anr了
2 读文件的buffer设置为block的整数倍4k
3 资源别泄漏(file.close(), cursor.close())，再也回收不了oom的问题

线程thread创建的监听 （这两个c++的实现）
file 文件io 的监听   (xhook 开源项目)

文件的访问必须枷锁


6 存储优化
存储： 分区，存储空间分区域，单独格式化，单独的文件系统

sp contentProvider file DB

SP: 异步加载文件带锁了，如果没哟加载完成，主线程要去访问，得wait()  --> 所以得出结论预加载sp，如果不看源码，你咋知道，
所以，确实我以前的学习方式有问题啊，没有看源码，听得多，动其实我也动了，源码与文档是最好的老师，当然前提你是能看的动
源码的, 看blog，还去记，脑袋有问题呢，还强行记忆，你能记多久，啊，又是重来，是不是哪里出问题了，确实出问题

SP小文件 ----> 微信使用MMKV 替换了sp, github上的wiki还需要查看(#####未实践#####)
为何SP 跨进程不安全(#####未实践#####)

https://github.com/Tencent/MMKV/wiki/android_ipc
SharedPreference 跨进程不安全





content Provider:(跨进程数据共享(mmap ))

初始化时机为何在Application.onCreate()之前(#####未实践#####)
跨进程访问(binder机制:fd)
binder传输大小限制：1M(#####未实践#####)
进程锁: pthread_mutex

/dev/binder  字符设备文件, 多个进程通过这个文件通信(文件锁)


没有实践就没有发言权
作为程序员，我们应该追求完美，最后钱自然而然的来了，所以千万别说因为钱
源码在手，天下我有


对象序列话: Seriable(反射读取value，性能低) 与 parceable (性能更高)， seriva框架twtter

数据序列化： json,xml,protobuf(二进制压缩)


DB 

多进程并发与多线程并发
sqlite里面做号了同步，锁的粒度是文件(粒度太大了，能不能做到表锁甚至行锁)
数据库常见异常DatabaseLockedExeception, 多线程或者多进程导致，可以捕获这个异常，延时操作

查询优化: 索引表---> 原始表

WCDB 微信的开源的数据库 (#####未实践#####)
orm框架,greenDAO  Room (面向的是开发者使用方便: 底层还是sqlite)

并发的两个维度: 进程并发，一个进程中的多个线程并发
sqlite 默认支持多进程并发, 使用的是文件锁(锁的力度够大了)
也模式支持多线程并发，所以应用程序不需要并发安全的问题，只不过还是文件锁，整个DB的锁，没有细分到库，到表，到行锁的力度
可以同时读
写是互斥的

数据加密(AES,DES)

7 网络优化:

手机双网卡: wifi , 移动网络
LinkTurbo: 加速： 使用wifi的同时使用移动网络加速   

何为网络优化，优化什么：
 工具(fiddler,wireshark, charles),注意，https，安装号嗅探工具的证书到客户端一定是可以抓到https的包
 一 延迟：数据包从源地址发出，到目的地，以及回来的时间
 二 带宽：
 三 安全(https: 已经为数据加过密(三方工具可以抓到)，  二次加密(AES,DES),自己认为重要的数据)
 四 压缩GZIP：数据量小，成功率就会高，发送的请求包含(url(参数), header, body),针对这三个来做事情,也就是协议的问题(json与protobuf)
 五 图片(压缩，webp) 
 
 https: 连接后密钥协商 与 蓝牙连接之后特征值确定一样
 网络请求= 发起请求 + DNS解析(本地缓存, LOcalDNS劫持, DNS调度问题) + 建立连接(三次握手,密钥协商,连接复用(活着)与长连接(keep-alive)) +  发送数据包 + 接收数据包(IO处理，解密) + 关闭连接(三次，麻烦)  
 
连接复用: 在连接上发送请求，客户端多个请求同时使用同一个连接发送，服务的从这个连接获取多个请求处理
 
 LocalDNS劫持 ---> http DNS (腾讯云，阿里云)，获取一批IP列表轮询
 
 合格的开发者知道怎么做，优秀的开发者知道为什么这样做

网络库
square okhttp   chrominu cronet   微信 mars    

网络监控(一次往返的时间，从发起请求到收到响应，其实在volley已经做过了)
性能监控，aspect(编译插桩,最好的实现方案 360 APM未实践ArgusAPM #####未实践#####)
 
网络日志与远程诊断(#####未实践#####)


8 UI 优化

适配(dp, 限定符资源) dp 与自适应布局基本可以搞定屏幕碎片问题
Window 是view的容器，每个窗口关联一个surface
匿名共享内存(#####未实践#####)
overDraw  	mContext
Activity 有属性Window(PhoneWindow)  Window里面有DecorView(顶层view， view是一个树),还有Context mContext;
Activity中创建PhoneWindow对象时候，穿的是this,也就是activity本身
PhoneWindow 有activity对象，相互持有

SurfaceView 与 TexttureView 是单独的surface



Activity  -- Window  ---- decorview --- surface
View 内部有displaylist boolean 是否需要重新绘制， true是的

VSYNC ---> 时钟中断，帧率是设备硬件决定

 高效开发
 程序员最痛恨写文档，还有别人不写文档
 9 编译: 三方开源的编译工具 facebook的Buck 与 google 的 bazel
 
 install run (增量编译)      
 
 10  编译插桩(AspectJ, ASM, ReDex)
 性能监控，网络监控，耗电监控
 
 java 文件的生成 (APT)
 
 字节码的修改(生成class字节码之后)

 
 监控三方SDK某个接口的性能(#####未实践#####)
 
 某个函数的性能有两种实现，一种是在调用端，一种是函数内部，两个问题： 调用点可能是有很多，第二 没有函数源码
 
插桩就是修改代码，例如，奔溃加try catch
无痕埋点: pageid, 控件 resource id(不会变有疑问)， 自动画埋点只能有简单数据，还需要自己设计一套DSL语言,能让插装代码通过反射获取到，这周验证（未验证）

DSL语言： test.a 表示实例test, 字段a  test.test()  表示实例test,调用test方法, [] 数组
插桩方法

java 文件 :  android annotation 自动生成java文件

字节码： 修改字节码(代码监控，代码修改，代码分析)  

操作字节码实现编译插桩功能：
  
AspectJ: 可以作用在方法被调用的位置，方法体，静态代码快，异常处理前后插入自定义的代码

简书大牛
https://www.jianshu.com/u/35083fcb7747

高可用上报组件：
一个开源项目首先他要解决的问题是什么，如果有经验你可以自己想想如果自己实现怎么搞，没经验的话那直接看
目标： 数据的又快 (产生了数据尽快上报)  有准 (准确性: 应用奔溃，杀死，数据不会丢失)

采样 (采样还是全量，自己衡量) ---> 保存 ---->  上报

采集什么数据：代码日志(还原业务的关键路劲), 用户行为日志
如何采集:

存储: 最简单方式： 单进程写 + 内存缓存 + 文件存储
缺点: 单进程一定会导致IPC调用，因为应用有多进程
内存缓存： 势必导致数据丢失

所以会导致 mmap (也是异步落盘) 的出现, mmap 的时候也必须放在子线程

方案: 多进程写(mmap, 进程自己产生的数据，自己写在自己的文件中(无锁实现)， 写完rename 放入上报进程的目录下)





上报规则: 上报间隔:固定周期 不能类型的数据埋点上报时间间隔不同，一秒=？ 一分钟 ？ 十分钟 ？
 按照你觉得哪些数据重要，时间间隔就小一点，上报就会频繁一些
 
 班车制度: 1 相同优先级埋点写入同一个文件(process_a_一分钟, process_a_十分钟, process_b_一分钟,  process_b_十分钟,)
 2 出现第一个埋点就发车，时间到了就停止写入，rename到上报目录去呗，进入上报队列
 
 mmap 向文件写一分钟的数据，最终文件十多大十未知的，每一次映射十需要传大小, 所以今天把这里干掉，映射大小与文件实际内容大小是什么关系,做实验



上报网络: wifi , 4g？
文件聚合上报: mmap 能优雅的实现 (未实践)


最终方案: 多进程写(自己写到自己的目录下)  + 单进程上报(保活能力最强的进程,其他进程把统计到的数据文件rename到上报进程的目录下来,上报进程只需要监听上报目录,最终实现了一套无锁高性能的文件同步模型)

文件聚合(合并): mmap 实现(未实践)， 优先高优先级的小文件合并成大文件,这个大文件的大小是需要确定的哈
   第二点，弱网情况下，包体积需要设置更小一些,先上报重要的参数




跨进程调用通常是很慢的

数据往哪里写:  内存， mmap,  file 这三种方式需要做对比，对比两个维度， 根据数据量大小和写完时间的对比，在I/O优化中有
微信开源mars 系列的高性能的日志模块xlog的原理 (未实践)
美团的logan 统一日志平台   (未实践)

采样，存储，上报，容灾

代码埋点:xxx
可视化埋点  Mixpanel
无痕埋点: GrowingIO

线上的疑难问题 咋搞: 能不能本地一样的测试  

logcat 本地测试的时候，打印到控制台，
日志级别: debug,version 本地调试， info 进入log日志，还原业务的关键路劲
TAG 建议: 模块_子模块, 比如下载模块 Downloader , 子模块 Downloader.task 

注意事项: 不能在for去写入log file，单行不能过长


用户日志的获取: 这种日志是用来还原业务的关键路劲的,一般是没用，所以只会写在本地，不会上报，除非出现问题去拉取

获取的两种方式: PUSH 拉取，拉取特定用户的用户日志
               用户主动上报
动态部署: 向有问题的用户，动态下发patch包，(问题解决了，pather包可以被撤回)，用户无感知，应用更新了()
          扯上热修复了哈。。。。
下发预设规则： 比如网络远程诊断: 比如用户某个网页无法打开,通过远程下发指令，对用户的整个网络进行检测，写入log，上传服务器，查看log

mars中的两个模块，搞出来
xlog：高可靠性高性能的运行期日志组件；
SDT： 网络诊断组件；

应用商店在本地做了一个网络诊断，还可以有UI，然后在加上push通道(针对有问题的用户,所以用户的唯一标识符的确定)，把诊断log上传到服务器就成了远程诊断呀，就这么简单

Lua 调用 java代码
Android中集成Lua (大小不到200k), 下发指令让lua调用java代码

android 动态部署是什么？

用户的唯一标识

   
鹏飞的学习心得   
c/c++ 环境编程参考文档   
https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5

焦虑不是迷茫与恐慌，而是认识到自己的不足，然后加足马力补齐短板

源码实现自己看，除非遇到某一个知识点跳不过去，采取搜答案，然后再验证

三方library，自己模拟实现
全栈发展：


framework 的学习方法
framework 主要内容: 
   代码              源码目录                   编译目录
系统相关widget       view                       framework.jar
系统AMS/PMS...       ../base/services           services.jar
系统内置资源         base/core                   framwork_res.apk

framework: 在没有刷机编译源码的情况下，使用android虚拟机与之对应的版本的系统代码调试, 最重要的是系统的class跑在哪个进程
           测试还是使用 android6.0 23模拟器吧

语言是(java与c++)
应用(四大组件启动流程)启动  (在没有刷机情况下，debug 没有成功)  
显示，
广播消息
按键信息传递
添加服务

anr: 

service 启动过程， 
这里涉及到两个进程, 本进程与 system_service, AMS 告诉 service什么时候创建，至于真正创建(反射)在本进程，具体在ActivityThread.java里面

android_util_Binder.cpp  c++调用 ---> java(层的入口) Binder.execTransact(paral data), 实例Binder对象的时候，调用native方法init(),在c++层
保存了binder对象,不管是调用进程还是system_server进程,在java层都是 Binder.execTransact() 都是这个入口，由c++调用,

memcopy(src, dest, size), paracel 传下来， int, String  4 + 2 + adb , 数据copy到内核缓冲区,   映射binder驱动创建缓冲区, service 进程也和binder驱动()mmap
binder 唤醒 service进程binder线程池的一个线程，解包，int，先读写4个字节，回调对应的方法... 处理完之后，原路返回，内核换线client线程 一去一回两次copy

一个进程(用户空间(在一个进程，直接传输)， 内核空间(可穿数据,(copy)))

 
frmawork 在没有整个系统下的源码调试(主要是services.jar 和  framework.jar)

第一，虚拟机(不要选择google play,不能调试系统进程,选择对应的google api)与与sdk下的源码一致，当然这不一定，你可以自己按照包名copy
第二，确保代码与要调试的进程是一致的
验证方法： 以AMS系统服务为例子
1 查看system_server 的 pid
  ps -A |grep system_server
  ps |grep system_server
  
  
2 通过cat查看此进程的内存映射，是否有services 映射到内存里面
  cat /proc/{pid}/maps |grep services
  结果
  9ea30000-9f5fb000 r--p 00000000 fd:00 977        /system/framework/oat/x86/services.odex
  
  查看某个进程下
ps -T {pid} 
这里{pid}是使用ps -A |grep SystemServer查出 SystemServer的进程号

zygote 进程: 加载了framework.jar

generic_x86:/ # cat /proc/1428/maps |grep framework.jar
b6dcb000-b6dcc000 r--s 00000000 fd:00 945        /system/framework/framework.jar

其他进程都是zygote.fork()他的，所以其父进程加载的资源，都能被子进程找到


    
简历
面试
算法:

我们不应该焦虑，也不需要浮躁，没有不过是的技术，不过时的只有只有学习能力与态度

frameworks/base/services/core/java/com/android/server/am/ActiveServices.java

ActivityThread.main(){
 Looper.prepareMainLooper();
 xxxxxx

Looper.loop();
}
->准备好了一个looper{ MQ   }

sThreadLocal.set(new Looper(quitAllowed));
Looper 与 threadlocal(Thread.currentThread()获取) 关联

threadlocal 保存的对象都是线程私有，关联了当前thread对象

threadlocal比较特殊,并发安全的一个对象，在多线程操作(set(value),get)无需枷锁

threadlocal.getMap(t) ---> threadlocalMap (每个线程都有单独的map对象,value就是存在这里),
多个线程往这一个threadlocal里面去存变量，然后去取，都只能取到自己存进去的东西


(frameworks/base/core/jni/android_os_MessageQueue.cpp)：
/system/core/libutils/include/utils/Looper.h

 obj.wait();  --> 调用到了 nativeWait();


uint64_t inc = 1;
    ssize_t nWrite = TEMP_FAILURE_RETRY(write(mWakeEventFd, &inc, sizeof(uint64_t)));

int eventCount = epoll_wait(mEpollFd, eventItems, EPOLL_MAX_EVENTS, timeoutMillis);



ps -A |grep system_server

查看进程中的内存映射
cat /proc/xxxx/maps |grep services



android 源码调试: 使用工具Genymotion，启动模拟器，下载需要调试的java文件，建立同样的包名 (未实践)

init ---> zygote   zygote 进程生万物, 通过fork()子进程，内存copy快速集成父进程加载过的的资源，这里指定是 framework.jar, 所以你想替换
系统的class，没门, 注意support包不在framework.jar中哦，所以是可以替换的


thread 线程  (矛盾的两句话)
1 减少上下文切换的次数 --->  得出尽量少开线程
2 尽可能的提高CPU的使用率 ---> 

线程池开多少个线程，还有时间

客户端访问网络的任务特征 : 同一时间并发不多(),网络执行请求时间短(线程上下文切换几率少)，调用频繁，那么多开线程

同一时间, 并发没有几个(超过10个网络任务已经算多了， 所以线程数量全开)，任务的执行时间都短，一般1~2秒就回来了


okhttp线程个数:  ThreadPoolExecutor(0, Integer.MAX_VALUE

任务执行周期短

张绍文  --> 核心数的 0.7 背  4核 开3个
IO密集型 ： 任务主要是读写操作呗, cpu碰到io操作,就会上下文切换,如果其他线程有任务，会被切换，没有进入等待,产生了iowait
cpu密集型， 任务主要是做逻辑预算

安全并发的几种方法，并发的安全操作

synchronized  与 lock (retweenload, readwritelock)  condition, 信号量的区别

锁分离: LinkedBlockQueue put 与 take 很好的体现，它有两把锁ReentrantLock加上Condition， put与take做到了真正并行，也就是锁分离
只需要put 与put 和  take与take做好同步就可以， 因为单向列表的实现

synchronized 
retrantlock
这两个是独占锁，做不到读与读的并发

readwritelock  读与读的并发

synchronized 是 虚拟机的实现 ： monitor-enter p0    monitor-exit p0

synchronized 性能不如读写锁，但是在客户端随处可以见synchronized，因为客户端并发的情况少呀，所以synchronized写起来方便

最终到无锁，CAS 

lock 是java的实现

如果不突破 C/C++ LINUX，那就永远也不能突破

service分为两种:  跨进的服务 与 本地服务
本地服务 : 就不用写aidl了，service中扩展binder，在客户端强转binder对象，

跨进程服务:  就必须aidl
绑定服务时，如果服务进程没有启动，会创建进程启动服务

源码与文档+加上调试技巧，无所不能

binder进程间通信的时候，client与server都会产生binder线程池

动态加载so，其实很简单，加载so有两个方法,System.load() loadlibrarey()

跨平台(andjroid 和 ios平台 )开发:
指的是: H5, facebook 的 RN, 阿里的weex， 微信小程序, flutter 
h5界面的组成: html css js,浏览器内核渲染
H5:  webview优化: DNS预解析，GZIP压缩(小的数据量)， 
webview加载页面全部是从网络上加载的，所以想办法减少体积， 离线包方案，提前下发到客户端，webview拦截资源请求

webview流程分为三部分
1 native时间 Activity 与 webview（第一次耗时，第二次很快，所以可以预创建） 对象创建的时间
2 网络时间: 先下载主文档到客户端,然后在解析的时候下载相关联的样式css,img与js,以及数据
3 浏览器内核渲染时间

加快请求速度: DNS预解析, 减少玉米数量,请求复用, gzip压缩，图片格式压缩，主文档越小越好, 纯js编写，别用框架

渲染模式两种
csr ：先加载主文档，然后在加载相关的css，img, 

ssr 一次性生产渲染的html

客户端登场优化: 
1 webview 预创建(150ms ~ 180ms)，复用
2 httpcache 缓存机制,header 头部字段

facebook rn， 与 阿里的weex 把 html控件转化成了自定义的系统控件(android或者ios)，走的是系统的渲染流程，不再是浏览器内核渲染了

小程序: 

c++ 才是生命力最顽强的跨平台方案

动态化方案: 
web容器增强  腾讯的vasSonic, 离线包
rn, weex 把前端空间转化为原生控件，走系统的渲染流程
业务插件化: 基于native组件化开发： 360replugin
布局动态化: 实现千人千面 阿里的Tangram, facebooke yoga


客户端: webview预创建，提前创建，复用一个 
混合开发: 客户端同学与前端同学

class X {
    int a;
    byte b;
    Integer c = new Integer();
}

X 对象占内存计算: 类定义:8type,  int : 4,  byte : 1, Integer:指针4
内存地址对其: 最大filed的整数倍:  8 * 3 = 24

Shallow Size 浅 : 计算自己所占内存大小

Retained Size 相关联的对象是否能被回收，如果能回收，需要加上能回收对象的大小



android 源码下载
https://pan.baidu.com/s/1LOeHW-x7I02pdRR7BMbhyw
o6b3

google sample 地址
https://developer.android.google.cn/samples?hl=zh_cn

frameworks/base/services/core/java/com/android/server/am/
  - ActivityManagerService.java
  - ActiveServices.java
  - ServiceRecord.java
  - ProcessRecord.java

frameworks/base/core/java/android/app/
  - IActivityManager.java
  - ActivityManagerNative.java (内含AMP)
  - ActivityManager.java
  
  - IApplicationThread.java
  - ApplicationThreadNative.java (内含ATP)
  - ActivityThread.java (内含ApplicationThread)
  
  - ContextImpl.java
  
  java主要的数据结构:所有的数据结构都是基于数组与列表扩展  colleciton (list, Set)   Map
  list: ArrayList,Vector(synchronized),CopyOnWriteArrayList(线程安全)数组实现   LinkedList 循环双向列表实现
  
  ArrayList： 数组，加扩容
  LinkedList： 列表
  
  Map： 数组加列表
  任何东西其他源码加上debug技巧，无锁不能
  
  线程安全的数据结构
  CopyOnWriteArrayList： 写时copy，写完改变指针的引用: 原理，get读是无锁，write 写时枷锁，重新copy 了一个数组，长度加1，然后填充原有数据，把新的数据加到末尾
  
  ConcurrentHashMap 比 Collections.map(map) 在高并发环境下快
  
  ConcurrentHashMap: get 无锁， put： 有锁，细粒度的锁
  
  ConcurrentLinkedQueue  并发安全，基于 CAS实现，无锁，高性能， 不阻塞
  
  blockingQueue, 见闻之一: 阻塞 LinkedBlockingQueue: 两把锁 ReentrantLock（putLock, takeLock ）
  
  synchronzied 独占锁  ReentrantLock  读写锁 (获取读锁，写锁，锁住不同的功能)，性能比ReentrantLock高，10倍
  
  ActivityThread.main()  --> threadLocal.set(new Looper()) --> looper.loop() --while-> messageQueue.next()
  
  Looper {
    MessageQueue()
  }
  
 messageQueue.enqueue(msg, when) --> 比较时间，队列已按照时间拍好顺序
 创建MessageQueue对象时候，在c++ 也会创建MessageQueue对象，给java返回地址long
 
 java MessageQueue.next()  --->  c++ NativeMessageQueue.pollOnce()  --> Looper.pollonce() -----> epoll_wait(mWakeEventFd)阻塞， 等待nativewake()来唤醒 
 ---> write(mWakeEventFd)
 
 
 
 
文件合并, 1.txt, 2.txt, 3.txt  以1为基准,把2,3 append上去

aroute: 
问题1 实现public class ARouter$$Group$$test implements IRouteGroup

1 问题：实现IRouteGroup的class是如何生成的,一定是注解处理RouteProcessor extends BaseProcessor


面试指南: (简历，面试，算法)
面试官看什么: (工作经历),项目介绍, 技能特长 )


技能特长 (高深入的技术：比如，开源项目实现原理,组件化,性能优化,熟悉android常见机制，比如消息机制，binder机制, 不熟悉的不要写)： 面试官特别关注: 所以你要好好写, 
        不熟悉的尽量不要写, 熟悉的东西面试官会一层一层的深入，除非面试官不懂
 
工作经历: 无法改变
 
项目介绍: 你做过了什么：突出项目的难点和自己的贡献，回顾代码吧，必须详细的回顾:具体细节, 实现逻辑,总结项目的难点，使用到框架的源码, 游刃有余
 
聊聊面试: java 与 android 基础(源码相关),自定义view, 触摸事件: 这里必须实践，调试源码,如果你想搞清楚这点，源码的阅读调试,开源框架原理, 日志记录框架，网络框架
 (插件化与热修复很难), BUG最多的地方
         


剩下还有算法，项目，简历重新写
 
 
 
 需要验证的问题
 模拟下载失败, 也就是在本地文件copy
 点击事件流程: 触摸事件的流程
 Handler binder机制
 
 binder机制: 
 
 recycleview 优化，
 
 熟练android以及鸿蒙开发技术，具有应用商店,手机助手,金融,视频,蓝牙等开发经验
熟悉Java,Js语言，掌握Jni, C/C++, 擅长从源码与文档找答案,用代码验证
良好的编码规范,熟练调试技巧,包括多进程,Jdk，android framework, 第三方优秀源码等的调试
图书: Java性能优化,android系统源代码场景分析等，并写demo测试
OOM问题: 周期性查询内存如到达阀值dump 堆内存裁剪hprof上报后台分析
熟悉android常见机制，比如Handler,binder机制等
大图监控: 编写gradle插件采用ASM在编译期替换自定义的ImageView,且不影响原有的性能
使用arouter思想组件化架构，解决模块间相互依赖以及通信问题
网络诊断: 使用java channel内存映射采集日志，通过push方式拉取有问题的线上用户进行排查
熟练低功耗蓝牙通信流程，包括手机端与设备端
性能统计: 采用mmap多进程写,单进程聚合上报
动态加载so以及防止反编译被利用
帧率监控
采用bsdiff开源c项目手动编译so, 进行APK增量升级

nrf connect 蓝牙调试工具



 
 
  
  
  
  
  
  
  
  
